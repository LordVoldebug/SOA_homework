# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2


class ChatStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMessage = channel.unary_unary(
                '/chat.Chat/SendMessage',
                request_serializer=chat__pb2.Message.SerializeToString,
                response_deserializer=chat__pb2.Empty.FromString,
                )
        self.ReceiveMessages = channel.unary_stream(
                '/chat.Chat/ReceiveMessages',
                request_serializer=chat__pb2.JoinRequest.SerializeToString,
                response_deserializer=chat__pb2.Message.FromString,
                )
        self.CheckRoom = channel.unary_unary(
                '/chat.Chat/CheckRoom',
                request_serializer=chat__pb2.RoomNumber.SerializeToString,
                response_deserializer=chat__pb2.RoomStatus.FromString,
                )
        self.CheckUsername = channel.unary_unary(
                '/chat.Chat/CheckUsername',
                request_serializer=chat__pb2.Username.SerializeToString,
                response_deserializer=chat__pb2.UsernameStatus.FromString,
                )
        self.Quit = channel.unary_unary(
                '/chat.Chat/Quit',
                request_serializer=chat__pb2.QuitRequest.SerializeToString,
                response_deserializer=chat__pb2.Empty.FromString,
                )
        self.ListActiveUsers = channel.unary_unary(
                '/chat.Chat/ListActiveUsers',
                request_serializer=chat__pb2.RoomNumber.SerializeToString,
                response_deserializer=chat__pb2.UserList.FromString,
                )


class ChatServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckRoom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckUsername(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Quit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListActiveUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=chat__pb2.Message.FromString,
                    response_serializer=chat__pb2.Empty.SerializeToString,
            ),
            'ReceiveMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.ReceiveMessages,
                    request_deserializer=chat__pb2.JoinRequest.FromString,
                    response_serializer=chat__pb2.Message.SerializeToString,
            ),
            'CheckRoom': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckRoom,
                    request_deserializer=chat__pb2.RoomNumber.FromString,
                    response_serializer=chat__pb2.RoomStatus.SerializeToString,
            ),
            'CheckUsername': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckUsername,
                    request_deserializer=chat__pb2.Username.FromString,
                    response_serializer=chat__pb2.UsernameStatus.SerializeToString,
            ),
            'Quit': grpc.unary_unary_rpc_method_handler(
                    servicer.Quit,
                    request_deserializer=chat__pb2.QuitRequest.FromString,
                    response_serializer=chat__pb2.Empty.SerializeToString,
            ),
            'ListActiveUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListActiveUsers,
                    request_deserializer=chat__pb2.RoomNumber.FromString,
                    response_serializer=chat__pb2.UserList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.Chat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Chat(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chat/SendMessage',
            chat__pb2.Message.SerializeToString,
            chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/chat.Chat/ReceiveMessages',
            chat__pb2.JoinRequest.SerializeToString,
            chat__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckRoom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chat/CheckRoom',
            chat__pb2.RoomNumber.SerializeToString,
            chat__pb2.RoomStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckUsername(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chat/CheckUsername',
            chat__pb2.Username.SerializeToString,
            chat__pb2.UsernameStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Quit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chat/Quit',
            chat__pb2.QuitRequest.SerializeToString,
            chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListActiveUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.Chat/ListActiveUsers',
            chat__pb2.RoomNumber.SerializeToString,
            chat__pb2.UserList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
